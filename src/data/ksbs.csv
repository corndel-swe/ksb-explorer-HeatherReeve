Code	Assessment Method	Description	Grading Criteria	Distinction Criteria
B1	AM2	Works independently and takes responsibility. For example, has a disciplined and responsible approach to risk and stays motivated and committed when facing challenges	Describes, how they have operated independently to complete tasks to given deadlines which reflect the level of responsibility assigned to them by the organisation’. (B1)	
B2	AM1	Applies logical thinking. For example, uses clear and valid reasoning when making decisions related to undertaking work instructions	Establishes a logical thinking approach to areas of work which require valid reasoning and/or justified decision making’ (B2)	
B3	AM1	Maintains a productive, professional and secure working environment	Describes how they have maintained a productive, professional and secure working environment throughout the project activity (B3)	
B4	AM2	Works collaboratively with a wide range of people in different roles, internally and externally, with a positive attitude to inclusion & diversity	Illustrates how they have worked collaboratively with people in different roles, internally and externally, which show a positive attitude to inclusion & diversity. (B4)	
B5	AM2	Acts with integrity with respect to ethical, legal and regulatory ensuring the protection of personal data, safety and security	Explains how they have established an approach in the workplace which reflects integrity with respect to ethical, legal, and regulatory matters and ensures the protection of personal data, safety and security. (B5)	
B6	AM2	Shows initiative and takes responsibility for solving problems within their own remit, being resourceful when faced with a problem to solve	Illustrates their approach to meeting unexpected minor changes at work and outlines their approach to delivering within their remit using their initiative. (B6)	
B7	AM2	Communicates effectively in a variety of situations to both a technical and non-technical audience	Explains how they have communicated effectively in a variety of situations to both a technical and non-technical audience. (B7)	Compares and contrasts the different types of communication used for technical and non-technical audiences and the benefits of these types of communication methods (K4, S15, B7)
B8	AM2	Shows curiosity to the business context in which the solution will be used, displaying an inquisitive approach to solving the problem. This includes the curiosity to explore new opportunities, techniques and the tenacity to improve methods and maximise performance of the solution and creativity in their approach to solutions	Illustrates how they have responded to the business context with curiosity to explore new opportunities and techniques with tenacity to improve solution performance, establishing an approach to methods and solutions which reflects a determination to succeed (B8)	
B9	AM2	Committed to continued professional development	Explains how they reflect on their continued professional development and act independently to seek out new opportunities (B9)	
K1	AM2	All stages of the software development life-cycle (what each stage contains, including the inputs and outputs)	Describes all stages of the software development lifecycle (K1)	
K10	AM2	principles and uses of relational and non-relational databases	Applies the principles and uses of relational and non-relational databases to software development tasks (K10)	
K11	AM1	software designs and functional or technical specifications	Reviews methods of software design with reference to functional/technical specifications and applies a justified approach to software development (K11, S11, S12)	
K12	AM2	software testing frameworks and methodologies	Describes basic software testing frameworks and methodologies (K12)	Evaluates the use of various software testing frameworks and methodologies and justifies their choice. (K12)
K2	AM1	roles and responsibilities within the software development lifecycle (who is responsible for what)	Explains the roles and responsibilities of all people working in the software development lifecycle, and how they relate to the project (K2)	
K3	AM2	the roles and responsibilities of the project life-cycle within your organisation, and your role	Describes the roles and responsibilities of the project lifecycle within their organisation, and their role (K3)	
K4	AM2	how best to communicate using the different communication methods and how to adapt appropriately to different audiences	Describes methods of communicating with all stakeholders that is determined by the audience and/or their level of technical knowledge. (K4, S15)	Compares and contrasts the different types of communication used for technical and non-technical audiences and the benefits of these types of communication methods (K4, S15, B7)
K5	AM2	the similarities and differences between different software development methodologies, such as agile and waterfall.	Describes the similarities and differences between different software methodologies, such as agile and waterfall (K5)	
K6	AM1	how teams work effectively to produce software and how to contribute appropriately	Outlines how teams work effectively to produce software and how to contribute appropriately (K6)	Compare and contrast the requirements of a software development team, and how they would ensure that each member (including themselves) were able to make a contribution (K6)
K7	AM2	software design approaches and patterns, to identify reusable solutions to commonly occurring problems	Suggests and applies different software design approaches and patterns, to identify reusable solutions to commonly occurring problems (include Bespoke or off-the-shelf) (K7)	Evaluates and recommends approaches to using reusable solutions to common problems. (K7)
K8	AM2	organisational policies and procedures relating to the tasks being undertaken, and when to follow them. For example the storage and treatment of GDPR sensitive data	Explains the relevance of organisational policies and procedures relating to the tasks being undertaken, and when to follow them including how they have followed company, team or client approaches to continuous integration, version, and source control (K8 S14)	
K9	AM1	algorithms, logic and data structures relevant to software development for example:- arrays- stacks- queues- linked lists- trees- graphs- hash tables- sorting algorithms- searching algorithms- critical sections and race conditions	Outlines and applies the rationale and use of algorithms, logic and data structures. (K9, S16)	
S1	AM1	create logical and maintainable code	Creates logical and maintainable code to deliver project outcomes, explaining their choice of approach. (S1)	Evaluates the advantages and disadvantages of different coding and programming techniques to create logical and maintainable code (S1)
S10	AM1	build, manage and deploy code into the relevant environment	Reviews and justifies their contribution to building, managing and deploying code into the relevant environment in accordance with the project specification (S10)	
S11	AM1	apply an appropriate software development approach according to the relevant paradigm (for example object oriented, event driven or procedural)	Reviews methods of software design with reference to functional/technical specifications and applies a justified approach to software development (K11, S11, S12)	Evaluates different software development approaches in order justifying the best alignment with a given paradigm. (for example, object oriented, event driven or procedural) (S11)
S12	AM1	follow software designs and functional or technical specifications	Reviews methods of software design with reference to functional/technical specifications and applies a justified approach to software development (K11, S11, S12)	
S13	AM2	follow testing frameworks and methodologies	Illustrates how to conduct test types, such as Integration, System, User Acceptance, Non-Functional, Performance and Security testing including how they have followed testing frameworks and methodologies (S5, S13)	
S14	AM2	follow company, team or client approaches to continuous integration, version and source control	Explains the relevance of organisational policies and procedures relating to the tasks being undertaken, and when to follow them including how they have followed company, team or client approaches to continuous integration, version, and source control (K8 S14)	
S15	AM2	communicate software solutions and ideas to technical and non-technical stakeholders	Describes methods of communicating with all stakeholders that is determined by the audience and/or their level of technical knowledge. (K4, S15)	Compares and contrasts the different types of communication used for technical and non-technical audiences and the benefits of these types of communication methods (K4, S15, B7)
S16	AM1	apply algorithms, logic and data structures	Outlines and applies the rationale and use of algorithms, logic and data structures. (K9, S16)	
S17	AM2	interpret and implement a given design whist remaining compliant with security and maintainability requirements	Explains, how they have interpreted and implemented a given design whilst remaining compliant with security and maintainability requirements (S17)	
S2	AM2	develop effective user interfaces	Explains, their own approach to development of user interfaces (S2)	
S3	AM2	link code to data sets	Explains, how they have linked code to data sets (S3)	
S4	AM1	test code and analyse results to correct errors found using unit testing	Analyses unit testing results and reviews the outcomes correcting errors. (S4)	
S5	AM2	conduct a range of test types, such as Integration, System, User Acceptance, Non-Functional, Performance and Security testing	Illustrates how to conduct test types, such as Integration, System, User Acceptance, Non-Functional, Performance and Security testing including how they have followed testing frameworks and methodologies (S5, S13)	
S6	AM1	identify and create test scenarios	Identifies and creates test scenarios which satisfy the project specification (S6)	
S7	AM1	apply structured techniques to problem solving, debug code and understand the structure of programmes in order to identify and resolve issues	Applies structured techniques to problem solving to identify and resolve issues and debug basic flaws in code (S7)	Analyses the software to identify and debug complex issues using a fix that provides a permanent solution. (S7)
S8	AM2	create simple software designs to effectively communicate understanding of the program	Creates simple software designs to communicate understanding of the programme to stakeholders and users of the programme (S8)	
S9	AM2	create analysis artefacts, such as use cases and/or user stories	Creates analysis artefacts, such as use cases and/or user stories to enable effective delivery of software activities (S9)